import*as utils from"../utils/color_utils";import{QuantizerMap}from"./quantizer_map";const INDEX_BITS=5,SIDE_LENGTH=33,TOTAL_SIZE=35937,directions={RED:"red",GREEN:"green",BLUE:"blue"};class QuantizerWu{constructor(t=[],e=[],s=[],i=[],r=[],h=[]){this.weights=t,this.momentsR=e,this.momentsG=s,this.momentsB=i,this.moments=r,this.cubes=h}quantize(t,e){this.constructHistogram(t),this.computeMoments();t=this.createBoxes(e);return this.createResult(t.resultCount)}constructHistogram(t){var e,s,i;this.weights=Array.from({length:TOTAL_SIZE}).fill(0),this.momentsR=Array.from({length:TOTAL_SIZE}).fill(0),this.momentsG=Array.from({length:TOTAL_SIZE}).fill(0),this.momentsB=Array.from({length:TOTAL_SIZE}).fill(0),this.moments=Array.from({length:TOTAL_SIZE}).fill(0);const r=QuantizerMap.quantize(t);for([s,i]of r.entries()){var h=utils.redFromArgb(s),n=utils.greenFromArgb(s),o=utils.blueFromArgb(s),m=8-INDEX_BITS,m=this.getIndex(1+(h>>m),1+(n>>m),1+(o>>m));this.weights[m]=(null!=(e=this.weights[m])?e:0)+i,this.momentsR[m]+=i*h,this.momentsG[m]+=i*n,this.momentsB[m]+=i*o,this.moments[m]+=i*(h*h+n*n+o*o)}}computeMoments(){for(let o=1;o<SIDE_LENGTH;o++){const u=Array.from({length:SIDE_LENGTH}).fill(0),c=Array.from({length:SIDE_LENGTH}).fill(0),l=Array.from({length:SIDE_LENGTH}).fill(0),a=Array.from({length:SIDE_LENGTH}).fill(0),b=Array.from({length:SIDE_LENGTH}).fill(0);for(let n=1;n<SIDE_LENGTH;n++){let e=0,s=0,i=0,r=0,h=0;for(let t=1;t<SIDE_LENGTH;t++){var m=this.getIndex(o,n,t),g=(e+=this.weights[m],s+=this.momentsR[m],i+=this.momentsG[m],r+=this.momentsB[m],h+=this.moments[m],u[t]+=e,c[t]+=s,l[t]+=i,a[t]+=r,b[t]+=h,this.getIndex(o-1,n,t));this.weights[m]=this.weights[g]+u[t],this.momentsR[m]=this.momentsR[g]+c[t],this.momentsG[m]=this.momentsG[g]+l[t],this.momentsB[m]=this.momentsB[g]+a[t],this.moments[m]=this.moments[g]+b[t]}}}}createBoxes(t){this.cubes=Array.from({length:t}).fill(0).map(()=>new Box);const i=Array.from({length:t}).fill(0);this.cubes[0].r0=0,this.cubes[0].g0=0,this.cubes[0].b0=0,this.cubes[0].r1=SIDE_LENGTH-1,this.cubes[0].g1=SIDE_LENGTH-1,this.cubes[0].b1=SIDE_LENGTH-1;let r=t,h=0;for(let s=1;s<t;s++){this.cut(this.cubes[h],this.cubes[s])?(i[h]=1<this.cubes[h].vol?this.variance(this.cubes[h]):0,i[s]=1<this.cubes[s].vol?this.variance(this.cubes[s]):0):(i[h]=0,s--),h=0;let e=i[0];for(let t=1;t<=s;t++)i[t]>e&&(e=i[t],h=t);if(e<=0){r=s+1;break}}return new CreateBoxesResult(t,r)}createResult(e){const s=[];for(let t=0;t<e;++t){var i,r,h=this.cubes[t],n=this.volume(h,this.weights);0<n&&(i=Math.round(this.volume(h,this.momentsR)/n),r=Math.round(this.volume(h,this.momentsG)/n),h=Math.round(this.volume(h,this.momentsB)/n),s.push(255<<24|(255&i)<<16|(255&r)<<8|255&h))}return s}variance(t){var e=this.volume(t,this.momentsR),s=this.volume(t,this.momentsG),i=this.volume(t,this.momentsB);return this.moments[this.getIndex(t.r1,t.g1,t.b1)]-this.moments[this.getIndex(t.r1,t.g1,t.b0)]-this.moments[this.getIndex(t.r1,t.g0,t.b1)]+this.moments[this.getIndex(t.r1,t.g0,t.b0)]-this.moments[this.getIndex(t.r0,t.g1,t.b1)]+this.moments[this.getIndex(t.r0,t.g1,t.b0)]+this.moments[this.getIndex(t.r0,t.g0,t.b1)]-this.moments[this.getIndex(t.r0,t.g0,t.b0)]-(e*e+s*s+i*i)/this.volume(t,this.weights)}cut(t,e){var s=this.volume(t,this.momentsR),i=this.volume(t,this.momentsG),r=this.volume(t,this.momentsB),h=this.volume(t,this.weights),n=this.maximize(t,directions.RED,t.r0+1,t.r1,s,i,r,h),o=this.maximize(t,directions.GREEN,t.g0+1,t.g1,s,i,r,h),m=this.maximize(t,directions.BLUE,t.b0+1,t.b1,s,i,r,h);let g;s=n.maximum,i=o.maximum,r=m.maximum;if(i<=s&&r<=s){if(n.cutLocation<0)return!1;g=directions.RED}else g=s<=i&&r<=i?directions.GREEN:directions.BLUE;switch(e.r1=t.r1,e.g1=t.g1,e.b1=t.b1,g){case directions.RED:t.r1=n.cutLocation,e.r0=t.r1,e.g0=t.g0,e.b0=t.b0;break;case directions.GREEN:t.g1=o.cutLocation,e.r0=t.r0,e.g0=t.g1,e.b0=t.b0;break;case directions.BLUE:t.b1=m.cutLocation,e.r0=t.r0,e.g0=t.g0,e.b0=t.b1;break;default:throw new Error("unexpected direction "+g)}return t.vol=(t.r1-t.r0)*(t.g1-t.g0)*(t.b1-t.b0),e.vol=(e.r1-e.r0)*(e.g1-e.g0)*(e.b1-e.b0),!0}maximize(e,s,i,r,h,n,o,m){var g=this.bottom(e,s,this.momentsR),u=this.bottom(e,s,this.momentsG),c=this.bottom(e,s,this.momentsB),l=this.bottom(e,s,this.weights);let a=0,b=-1;var d,I,x=0,E=0,f=0;for(let t=i;t<r;t++)x=g+this.top(e,s,t,this.momentsR),E=u+this.top(e,s,t,this.momentsG),f=c+this.top(e,s,t,this.momentsB),0!==(I=l+this.top(e,s,t,this.weights))&&(d=(x*x+E*E+f*f)/+I,x=h-x,E=n-E,f=o-f,0!=(I=m-I)&&(d+=(x*x+E*E+f*f)/I)>a&&(a=d,b=t));return new MaximizeResult(b,a)}volume(t,e){return e[this.getIndex(t.r1,t.g1,t.b1)]-e[this.getIndex(t.r1,t.g1,t.b0)]-e[this.getIndex(t.r1,t.g0,t.b1)]+e[this.getIndex(t.r1,t.g0,t.b0)]-e[this.getIndex(t.r0,t.g1,t.b1)]+e[this.getIndex(t.r0,t.g1,t.b0)]+e[this.getIndex(t.r0,t.g0,t.b1)]-e[this.getIndex(t.r0,t.g0,t.b0)]}bottom(t,e,s){switch(e){case directions.RED:return-s[this.getIndex(t.r0,t.g1,t.b1)]+s[this.getIndex(t.r0,t.g1,t.b0)]+s[this.getIndex(t.r0,t.g0,t.b1)]-s[this.getIndex(t.r0,t.g0,t.b0)];case directions.GREEN:return-s[this.getIndex(t.r1,t.g0,t.b1)]+s[this.getIndex(t.r1,t.g0,t.b0)]+s[this.getIndex(t.r0,t.g0,t.b1)]-s[this.getIndex(t.r0,t.g0,t.b0)];case directions.BLUE:return-s[this.getIndex(t.r1,t.g1,t.b0)]+s[this.getIndex(t.r1,t.g0,t.b0)]+s[this.getIndex(t.r0,t.g1,t.b0)]-s[this.getIndex(t.r0,t.g0,t.b0)];default:throw new Error("unexpected direction $direction")}}top(t,e,s,i){switch(e){case directions.RED:return i[this.getIndex(s,t.g1,t.b1)]-i[this.getIndex(s,t.g1,t.b0)]-i[this.getIndex(s,t.g0,t.b1)]+i[this.getIndex(s,t.g0,t.b0)];case directions.GREEN:return i[this.getIndex(t.r1,s,t.b1)]-i[this.getIndex(t.r1,s,t.b0)]-i[this.getIndex(t.r0,s,t.b1)]+i[this.getIndex(t.r0,s,t.b0)];case directions.BLUE:return i[this.getIndex(t.r1,t.g1,s)]-i[this.getIndex(t.r1,t.g0,s)]-i[this.getIndex(t.r0,t.g1,s)]+i[this.getIndex(t.r0,t.g0,s)];default:throw new Error("unexpected direction $direction")}}getIndex(t,e,s){return(t<<2*INDEX_BITS)+(t<<INDEX_BITS+1)+t+(e<<INDEX_BITS)+e+s}}class Box{constructor(t=0,e=0,s=0,i=0,r=0,h=0,n=0){this.r0=t,this.r1=e,this.g0=s,this.g1=i,this.b0=r,this.b1=h,this.vol=n}}class CreateBoxesResult{constructor(t,e){this.requestedCount=t,this.resultCount=e}}class MaximizeResult{constructor(t,e){this.cutLocation=t,this.maximum=e}}export{QuantizerWu};